doctype html
html
	head

		title 
		script(src="https://cdn.socket.io/socket.io-1.4.5.js")
		script(src="https://ajax.googleapis.com/ajax/libs/jquery/3.0.0/jquery.min.js")
		script(src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.1.6/Chart.js")
		link(rel="stylesheet", href="css/report.css")

		script.
			var lec_stud = !{JSON.stringify(stud_lec)};
			var studStats = !{JSON.stringify(student_stats)};
			var avgStats = !{JSON.stringify(all_stats)};
			$('title').text('Lecture - ' + lec_stud.lecture);


			var table_content = '<tr><th>Tag Name</th><th>Overall Yes%</th><th>Overall No%</th><th>Overall Unknown%</th><th>Yes% that gave an answer</th><th>No% that gave an answer</th></tr>';
		

			
			var overallColspan = 6;
			
			$(document).ready(function(){

				$('#section_table').append(table_content);
				$('#avg_table').append(table_content);

				addToTable('section_table', studStats);
				addToTable('avg_table', avgStats);

				addChart('student_chart', studStats, 'Hard');
				addChart('avg_chart', avgStats, 'Hard');

				addTableColour();
			});

			function addChart(canvas, stats, tag_name)
			{
				var data = {};
				data.labels = [];
				data.datasets = [{}];
				data.datasets[0].label = "Understanding";
				data.datasets[0].borderWidth = 1;
				data.datasets[0].borderColor = [];
				data.datasets[0].backgroundColor = [];
				data.datasets[0].data = [];

				Object.keys(stats).forEach(function(section){//each section
					var secVar = stats[section];

					data.labels.push(section);

					var tag = secVar[tag_name];
					var color = randRGB();
					data.datasets[0].borderColor.push(RGBA(color, 1));
					data.datasets[0].backgroundColor.push(RGBA(color, 0.2));
					data.datasets[0].data.push(chartFormat(tag.U, tag.U+tag.D));
				});

				var myBarChart = new Chart($('#' + canvas), {
					type: 'bar',
					data: data,
					options: {
						responsive: false,
						animation: false,
						scales: {
							yAxes:[{
								ticks: {
									min : 0,
									max : 100,
									maxTicksLimit: 4,
									stepSize: 25
								}
							}]
						}
					}
				});
			}			

			function chartFormat(score, length)
			{
				return ((length === 0) ? '0' :(score/length) * 100);
			}


			function createScoreData(item)
			{
			    return {
			        overallYes: percentFormat(item.U, item.length),
			        overallNo: percentFormat(item.D, item.length),
			        overallUnknown: percentFormat(item.UNK, item.length),
			        givenYes: percentFormat(item.U, item.U+item.D),
			        givenNo: percentFormat(item.D, item.U+item.D)
			    };
			}

			function addToTable(tableid, stats)
			{
				Object.keys(stats).forEach(function(section){//each section
					var secVar = stats[section];

					$('#' + tableid).append(makeHeadTableInsert(section, overallColspan));
					Object.keys(secVar).forEach(function(tag){//each tag
						$('#' + tableid).append(makeTableInsert(tag, secVar[tag]));
					});
				});
			}

			function makeHeadTableInsert(value, colspan)
			{
				return '<tr class="removable"><th class="lecture" colspan='+colspan+'>'+ value+'</td></tr>';	
			}

			function makeNameTableInsert(title, colspan)
			{
				return '<tr class="removable "><td class="title" colspan='+colspan+'>'+ title + '</td></tr>';	
			}

			function makeTableInsert(tag, item)
			{
				var calScore = createScoreData(item);
				return '<tr class="removable">'+
				'<td>'+tag+'</td>' +
				'<td>'+ calScore.overallYes +'</td>' +
				'<td>'+ calScore.overallNo + '</td>' +
				'<td>'+ calScore.overallUnknown + '</td>' +
				'<td>'+ calScore.givenYes + '</td>' +
				'<td>'+ calScore.givenNo + '</td></tr>';	
			}

			function percentFormat(score, length)
			{
				return ((length === 0) ? '0.00' :((score/length) * 100).toFixed(2)) + "%";
			}


			function addTableColour()
			{
				$('td').each(function(){
					var text = $(this).text();

					if(text.includes('%'))
					{
						text = text.substr(0, text.length -1);
						var percent = Number(text);

						if(percent >= 90)
							$(this).addClass('exellent');
						else if(percent >= 80)
							$(this).addClass('great');
						else if(percent >= 70)
							$(this).addClass('good');
						else if(percent >= 60)
							$(this).addClass('ok');
						else if(percent >= 50)
							$(this).addClass('bad');
						else
							$(this).addClass('need_help');
					}
				});
			}
		
			function RGBA(rgb, a)
			{
			    return 'rgba('+rgb.r+','+rgb.g+','+rgb.b+','+a+')';
			}

			function randRGB()
			{
			    return {r:rand(255), g:rand(255), b:rand(255)};
			}

			function rand(max)
			{
			    return Math.floor(Math.random() * max);
			}

	body
		if isInstructor
			p Lecture - #{stud_lec.lecture}, Student - #{stud_lec.student}
		else
			p Lecture - #{stud_lec.lecture}
		table(id='section_table', border='1')
		p Average over all Students
		table(id='avg_table', border='1')
		canvas(id="student_chart")

		canvas(id='avg_chart')
